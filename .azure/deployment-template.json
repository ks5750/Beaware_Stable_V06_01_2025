{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "appName": {
      "type": "string",
      "defaultValue": "beaware",
      "metadata": {
        "description": "Base name for all resources (max 11 characters, lowercase, no special characters)"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "eastus",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "postgresAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "PostgreSQL admin password"
      }
    },
    "firebaseApiKey": {
      "type": "securestring",
      "metadata": {
        "description": "Firebase API Key"
      }
    },
    "firebaseProjectId": {
      "type": "string",
      "metadata": {
        "description": "Firebase Project ID"
      }
    },
    "firebaseAppId": {
      "type": "securestring",
      "metadata": {
        "description": "Firebase App ID"
      }
    },
    "emailPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Email password for sending emails"
      }
    }
  },
  "variables": {
    "uniqueAppName": "[concat(parameters('appName'), uniqueString(resourceGroup().id))]",
    "postgresServerName": "[concat(variables('uniqueAppName'), '-postgres')]",
    "databaseName": "beawarefyi",
    "registryName": "[concat(variables('uniqueAppName'), 'registry')]",
    "appServicePlanName": "[concat(variables('uniqueAppName'), '-plan')]",
    "webAppName": "[concat(variables('uniqueAppName'), '-app')]"
  },
  "resources": [
    {
      "type": "Microsoft.DBforPostgreSQL/servers",
      "apiVersion": "2017-12-01",
      "name": "[variables('postgresServerName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "B_Gen5_1",
        "tier": "Basic",
        "capacity": 1,
        "size": 5120,
        "family": "Gen5"
      },
      "properties": {
        "version": "11",
        "administratorLogin": "postgres",
        "administratorLoginPassword": "[parameters('postgresAdminPassword')]",
        "storageProfile": {
          "storageMB": 5120,
          "backupRetentionDays": 7,
          "geoRedundantBackup": "Disabled"
        },
        "createMode": "Default"
      },
      "resources": [
        {
          "type": "firewallRules",
          "apiVersion": "2017-12-01",
          "name": "AllowAllAzureIPs",
          "dependsOn": [
            "[resourceId('Microsoft.DBforPostgreSQL/servers', variables('postgresServerName'))]"
          ],
          "properties": {
            "startIpAddress": "0.0.0.0",
            "endIpAddress": "0.0.0.0"
          }
        },
        {
          "type": "databases",
          "apiVersion": "2017-12-01",
          "name": "[variables('databaseName')]",
          "dependsOn": [
            "[resourceId('Microsoft.DBforPostgreSQL/servers', variables('postgresServerName'))]"
          ],
          "properties": {
            "charset": "utf8",
            "collation": "en_US.utf8"
          }
        }
      ]
    },
    {
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2019-05-01",
      "name": "[variables('registryName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Basic"
      },
      "properties": {
        "adminUserEnabled": true
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2021-02-01",
      "name": "[variables('appServicePlanName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "B1",
        "tier": "Basic",
        "size": "B1",
        "family": "B",
        "capacity": 1
      },
      "kind": "linux",
      "properties": {
        "reserved": true
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-02-01",
      "name": "[variables('webAppName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.ContainerRegistry/registries', variables('registryName'))]",
        "[resourceId('Microsoft.DBforPostgreSQL/servers', variables('postgresServerName'))]"
      ],
      "kind": "app,linux,container",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
              "value": "false"
            },
            {
              "name": "NODE_ENV",
              "value": "production"
            },
            {
              "name": "RUNNING_IN_AZURE",
              "value": "true"
            },
            {
              "name": "DATABASE_URL",
              "value": "[concat('postgresql://postgres:', parameters('postgresAdminPassword'), '@', variables('postgresServerName'), '.postgres.database.azure.com:5432/', variables('databaseName'), '?sslmode=require')]"
            },
            {
              "name": "PGHOST",
              "value": "[concat(variables('postgresServerName'), '.postgres.database.azure.com')]"
            },
            {
              "name": "PGUSER",
              "value": "[concat('postgres@', variables('postgresServerName'))]"
            },
            {
              "name": "PGPASSWORD",
              "value": "[parameters('postgresAdminPassword')]"
            },
            {
              "name": "PGDATABASE",
              "value": "[variables('databaseName')]"
            },
            {
              "name": "VITE_FIREBASE_API_KEY",
              "value": "[parameters('firebaseApiKey')]"
            },
            {
              "name": "VITE_FIREBASE_PROJECT_ID",
              "value": "[parameters('firebaseProjectId')]"
            },
            {
              "name": "VITE_FIREBASE_APP_ID",
              "value": "[parameters('firebaseAppId')]"
            },
            {
              "name": "EMAIL_PASSWORD",
              "value": "[parameters('emailPassword')]"
            },
            {
              "name": "DOCKER_REGISTRY_SERVER_URL",
              "value": "[concat('https://', reference(resourceId('Microsoft.ContainerRegistry/registries', variables('registryName'))).loginServer)]"
            },
            {
              "name": "DOCKER_REGISTRY_SERVER_USERNAME",
              "value": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries', variables('registryName')), '2019-05-01').username]"
            },
            {
              "name": "DOCKER_REGISTRY_SERVER_PASSWORD",
              "value": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries', variables('registryName')), '2019-05-01').passwords[0].value]"
            }
          ],
          "linuxFxVersion": "DOCKER|node:20-alpine",
          "alwaysOn": true
        },
        "httpsOnly": true
      }
    }
  ],
  "outputs": {
    "webAppUrl": {
      "type": "string",
      "value": "[concat('https://', reference(resourceId('Microsoft.Web/sites', variables('webAppName'))).defaultHostName)]"
    },
    "postgresConnectionString": {
      "type": "string",
      "value": "[concat('postgresql://postgres:', parameters('postgresAdminPassword'), '@', variables('postgresServerName'), '.postgres.database.azure.com:5432/', variables('databaseName'), '?sslmode=require')]"
    },
    "registryUrl": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', variables('registryName'))).loginServer]"
    }
  }
}